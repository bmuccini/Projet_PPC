"""import sysv_ipc
from Vehicule import Vehicule
from random import randint
import time
import pickle
import socket

# Cl√©s pour les files de message qui doivent etre les meme que celles pour les v√©hicules normaux
KEY_NORD = 1000
KEY_SUD = 1001
KEY_EST = 1002
KEY_OUEST = 1003

# Cl√© pour le signal des v√©hicules prioritaires
#SIGNAL_KEY = 5678

#Ouvre les files de messages
def ouvrir_files_messages():
    try:
        queue_nord = sysv_ipc.MessageQueue(KEY_NORD)
        queue_sud = sysv_ipc.MessageQueue(KEY_SUD)
        queue_est = sysv_ipc.MessageQueue(KEY_EST)
        queue_ouest = sysv_ipc.MessageQueue(KEY_OUEST)
        return queue_nord, queue_sud, queue_est, queue_ouest
    except sysv_ipc.ExistentialError:
        print("Erreur : Les files de messages n'existent pas.")
        exit(1)

def send_priority_signal(direction):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect(('localhost', 65432))
        s.sendall(f'PRIORITY:{direction}'.encode())  # Envoyer la direction

# Gen√®re des v√©hicules prioritaires et les ajoutes aux files de messages
def generation_trafic_prioritaire(queue_nord, queue_sud, queue_est, queue_ouest):
    #semaphore_signal = sysv_ipc.Semaphore(SIGNAL_KEY, sysv_ipc.IPC_CREAT)

    #Creation des vehicules
    while True :
        liste_direction = ["N","S","E","W"]  # Doit etre dans la boucle pour que la taille de la liste reste constante
        depart = liste_direction[randint(0,3)]
        liste_direction.remove(depart)
        
        arrivee = liste_direction[randint(0,2)]

        vehicule = Vehicule(depart, arrivee, True) #True pour signifier v√©hicule prioritaire
        message = pickle.dumps(vehicule)  # S√©rialiser avec pickle

        if depart == "N":
            queue_nord.send(message)
            print(f"V√©hicule prioritaire Nord ajout√© : {vehicule}")
        elif depart == "S":
            queue_sud.send(message)
            print (f"V√©hicule prioritaire Sud ajout√© : {vehicule}")
        elif depart == "E":
            queue_est.send(message)
            print (f"V√©hicule prioritaire Est ajout√© : {vehicule}")
        else:
            queue_ouest.send(message)
            print (f"V√©hicule prioritaire Ouest ajout√© : {vehicule}")

        # Signaler √† lights.py de modifier les feux
        #semaphore_signal.release()
        #print(f"üì¢ Signal envoy√© √† lights.py pour prioriser {depart}")
        send_priority_signal(depart)
        time.sleep(8) #temps entre chaque g√©n√©raation de v√©hicule prioritaire

# Exemple d'utilisation
#send_priority_signal(depart)


if __name__ == "__main__":
    # Ouvrir les files de messages
    queue_nord, queue_sud, queue_est, queue_ouest = ouvrir_files_messages()

    # D√©marrer la g√©n√©ration de trafic prioritaire
    generation_trafic_prioritaire(queue_nord, queue_sud, queue_est, queue_ouest)"""


import sysv_ipc
from Vehicule import Vehicule
from random import randint
import time
import pickle
import socket

# Configuration
QUEUE_KEYS = {"N": 1000, "S": 1001, "E": 1002, "W": 1003}
SOCKET_PORT = 65432

def send_signal(direction):
    """Envoie un signal √† `programme_feu.py` pour donner la priorit√© √† un v√©hicule prioritaire."""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)  # Timeout de 2 secondes
            s.connect(('localhost', SOCKET_PORT))
            s.sendall(f'PRIORITY:{direction}'.encode())
            print(f"üì¢ Signal envoy√© √† programme_feu.py pour donner la priorit√© au feu {direction}")
    except ConnectionRefusedError:
        print("‚ö†Ô∏è Erreur : programme_feu.py ne semble pas √™tre en cours d'ex√©cution.")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur inattendue : {e}")

    #except (ConnectionRefusedError, TimeoutError) as e:
    #    print(f"‚ö†Ô∏è Erreur de connexion : {e}. V√©rifiez que programme_feu.py est lanc√©.")
    #except Exception as e:
    #    print(f"‚ö†Ô∏è Erreur inattendue : {e}")

def generate_priority_vehicles():
    # Ouvrir les files de messages
    queues = {dir: sysv_ipc.MessageQueue(key) for dir, key in QUEUE_KEYS.items()}
    
    while True:
        try:
            # G√©n√©rer un v√©hicule prioritaire
            depart = ["N", "S", "E", "W"][randint(0, 3)]
            arrivee = [d for d in ["N", "S", "E", "W"] if d != depart][randint(0, 2)]
            
            vehicule = Vehicule(depart, arrivee, True)
            queues[depart].send(pickle.dumps(vehicule))
            print(f"üöë V√©hicule prioritaire {depart}‚Üí{arrivee}")

            # Envoyer le signal pour prioriser ce v√©hicule
            send_signal(depart)
            
            time.sleep(16)  # Attendre 8 secondes avant de g√©n√©rer un autre v√©hicule prioritaire
        
        #except KeyboardInterrupt:
        #    print("\nArr√™t de la g√©n√©ration de trafic prioritaire.")
        #    break
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur critique : {e}")
            time.sleep(5)  # Attendre avant de r√©essayer

if __name__ == "__main__":
    generate_priority_vehicles()

